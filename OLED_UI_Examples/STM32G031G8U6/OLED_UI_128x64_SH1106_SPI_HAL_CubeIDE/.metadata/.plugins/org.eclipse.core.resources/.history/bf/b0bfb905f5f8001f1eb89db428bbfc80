#include <misc.h>
#include "ui.h"
#include "stm32g0xx_hal.h"
#include "stm32g0xx_hal_gpio.h"
#include "stm32g0xx_hal_spi.h"
#include "oled.h"
#include "LIS2DH12.h"
#include "math.h"
#include "string.h"
#include "soft_timer.h"
#include "scale.h"
#include "usermain.h"
#include "flash.h"

// #define OLED_CS_GPIO_Port GPIOA
// #define OLED_CS_Pin GPIO_PIN_4
#define OLED_DC_GPIO_Port GPIOA
#define OLED_DC_Pin GPIO_PIN_0

extern SPI_HandleTypeDef hspi1;
extern TIM_HandleTypeDef htim16;

typedef enum display_mode_t
{
	DISP_HOME,				 // 主页
	DISP_INFOBEFORESETTINGS, // 如何控制增减
	DISP_SETTINGS,			 // 设置
	DISP_SCRN_SAVER,		 // 屏幕保护
	DISP_SLEEP,				 // 休眠
	DISP_PWROFF,			 // 关机（充电开机）
	DISP_DEBUG				 // 调试
} display_mode_t;
display_mode_t display_mode = DISP_DEBUG;	//TODO:量产确认这里应为DISP_HOME

typedef struct user_settings_t
{
	uint16_t SCRN_SAV_time_second; // 进入屏保的时间
	uint16_t sleep_time_second;	   // 进入休眠模式的时间
	uint8_t show_history_at_home;  // 是否在首页显示历史记录
} user_settings_t;
user_settings_t user_settings;

// 屏保超时
#define TIME_TO_SCRN_SAVER (user_settings.SCRN_SAV_time_second * 1000) // ms
// 休眠超时
#define TIME_TO_SLEEP (user_settings.sleep_time_second * 1000) // ms

// 设备朝向。TODO: 声明改extern，在姿态传感器那里声明
extern uint8_t device_orientation;

// 按钮状态
extern struct BTN_stat_t BTN_stat;
extern struct BTN_stat_t STK_UP_stat;
extern struct BTN_stat_t STK_DN_stat;

// debug
extern LIS2DH12_data_t volatile LIS2DH12_data;
extern LIS2DH12_data_t volatile LIS2DH12_raw_data;

// 电池管理
extern uint8_t bat_percent;
extern double Vbat, Vusb;

// 设置页面
enum setting_page_t
{
	SET_MENU = 0,		// 主菜单
	SET_SETTINGS = 1,	// 设置
	SET_HISTORY = 2,	// 历史记录
	SET_SCRN_B = 3,		// 屏幕亮度
	SET_SCRN_SAVER = 4, // 屏保时间
	SET_SLEEP = 5,		// 休眠时间
	SET_SYSINFO = 6,	// 系统信息
	SET_CALI = 7,		// 称重校准
	SET_FACTORY = 8,	// 恢复出厂设置
	SET_POWEROFF = 9,	// 关机
	SET_ABOUT = 10		// 关于
} setting_page = SET_MENU;		//TODO：量产前检查这里，应为SET_MENU

void scrn_init_delay_cb(void *argv, unsigned short int argc)
{
	OLED_WR_Byte(0xAF, OLED_CMD); /*display ON*/
}

extern double weight;
extern double stick_value;

unsigned char mainMenuHistoryText[] = {0, 1, 2, 3, 4, 5} /*查看历史记录*/;
unsigned char mainMenuToSettingsText[] = {6, 7, 8, 9} /*系统设置*/;

unsigned char settingsHistoryText[] = {2, 3, 4, 5} /*历史记录*/;
unsigned char settingsScreenBrightnessText[] = {10, 11, 12, 13} /*屏幕亮度*/;
unsigned char settingsScreenSaverTimeText[] = {10, 14, 15, 16} /*屏保时间*/;
unsigned char settingsSleepTimeText[] = {17, 18, 15, 16} /*休眠时间*/;
unsigned char settingsSysInfoText[] = {6, 7, 19, 20} /*系统信息*/;
unsigned char settingsScaleCaliText[] = {21, 22, 23, 24} /*称重校准*/;
unsigned char settingsFactoryResetText[] = {28, 29, 30, 31, 8, 9} /*恢复出厂设置*/;
unsigned char settingsPowerOffText[] = {32, 35} /*关机*/;
unsigned char settingsAboutText[] = {32, 33, 34, 35} /*关于本机*/;

char mainMenuTextCount[] = {6, 4};					   // 菜单项文字长度
char settingsTextCount[] = {4, 4, 4, 4, 4, 4, 6, 2, 4}; // 设置项文字长度

unsigned char *mainMenuNames[] = {mainMenuHistoryText, mainMenuToSettingsText};
unsigned char *settingsNames[] = {settingsHistoryText, settingsScreenBrightnessText, settingsScreenSaverTimeText, settingsSleepTimeText, settingsSysInfoText, settingsScaleCaliText, settingsFactoryResetText, settingsPowerOffText, settingsAboutText};

Menu_t mainmenu;
Menu_t settingsmenu;
uint8_t last_device_orientation;

void DisplayInit()
{
	// 初始化设置：sh1106（https://item.taobao.com/item.htm?_u=h39kfi268b4b&id=577759592834&spm=a1z09.2.0.0.43892e8du0njuI）
	OLED_Init();
	// 启动定时器，开始60Hz刷新
	HAL_TIM_Base_Start_IT(&htim16);

	//旋转屏幕
	OLED_DisplayTurn(device_orientation);
	// TODO: 确认方向
	mainmenu.oriantation = device_orientation;
	settingsmenu.oriantation = device_orientation;
	last_device_orientation = device_orientation;

	// 延时点亮屏幕，避免出现不好的效果
	soft_timer_start(SOFT_TIMER_1_SCRN_INIT, SOFT_TIMER_MODE_ONE_SHOT, 100, scrn_init_delay_cb, NULL, 0);
}


void reset_menu()
{
	// ==================== 主页 ====================

	mainmenu.menuNames = mainMenuNames;			// 菜单项目名称
	mainmenu.textCount = &mainMenuTextCount[0]; // 菜单项文字长度

	mainmenu.currentPos = 0; // 当前位置
	mainmenu.movePos = 0;	 // 设置位置:+1往下，-1往上
	mainmenu.total = 2;		 // 项目总数
	// mainmenu.oriantation = device_oriantation;	 // 朝向

	mainmenu.moveTime = 0; // 移动时间（滑块和菜单项一起移动）

	mainmenu.sliderY = 0;			 // 滑块绘制位置
	mainmenu.sliderMoveStartPos = 0; // 滑块移动起点
	mainmenu.sliderMoveTarget = 0;	 // 滑块目标位置

	mainmenu.itemsY = 0;			// 菜单项绘制位置
	mainmenu.itemPos = 0;			// 菜单位置
	mainmenu.itemsMoveStartPos = 0; // 菜单项移动起点		0-1
	mainmenu.itemsMoveTarget = 0;	// 菜单项目标位置

	mainmenu.selectedItemPos = 0;		   // 选中位置				0-4
	mainmenu.selectedItemY = 0;			   // 选中项绘制位置
	mainmenu.selectedItemMoveStartPos = 0; // 选中项移动起点
	mainmenu.selectedItemMoveTarget = 0;   // 选中项目标位置

	mainmenu.moveComplete = 1; // 移动完成
}
void reset_settings_menu()
{
	// ==================== 设置 ====================

	settingsmenu.menuNames = settingsNames;			// 菜单项目名称
	settingsmenu.textCount = &settingsTextCount[0]; // 菜单项文字长度

	settingsmenu.currentPos = 0; // 当前位置
	settingsmenu.movePos = 0;	 // 设置位置:+1往下，-1往上
	settingsmenu.total = 9;	 // 项目总数
	// settingsmenu.oriantation = device_oriantation;	 // 朝向

	settingsmenu.moveTime = 0; // 移动时间（滑块和菜单项一起移动）

	settingsmenu.sliderY = 0;			 // 滑块绘制位置
	settingsmenu.sliderMoveStartPos = 0; // 滑块移动起点
	settingsmenu.sliderMoveTarget = 0;	 // 滑块目标位置

	settingsmenu.itemsY = 0;			// 菜单项绘制位置
	settingsmenu.itemPos = 0;			// 菜单位置
	settingsmenu.itemsMoveStartPos = 0; // 菜单项移动起点		0-1
	settingsmenu.itemsMoveTarget = 0;	// 菜单项目标位置

	settingsmenu.selectedItemPos = 0;		   // 选中位置				0-4
	settingsmenu.selectedItemY = 0;			   // 选中项绘制位置
	settingsmenu.selectedItemMoveStartPos = 0; // 选中项移动起点
	settingsmenu.selectedItemMoveTarget = 0;   // 选中项目标位置

	settingsmenu.moveComplete = 1; // 移动完成
}
void reset_btns()
{
	BTN_stat.pressEvent = 0;
	BTN_stat.longPressEvent = 0;
	STK_DN_stat.pressEvent = 0;
	STK_DN_stat.longPressEvent = 0;
	STK_UP_stat.pressEvent = 0;
	STK_UP_stat.longPressEvent = 0;
}

void ui_enter_settings(void *argv, unsigned short int argc)
{
	display_mode = DISP_SETTINGS;
	setting_page = SET_MENU;
}

extern uint8_t ok_to_write_gram_flag;
//extern sys_cali_data_t sys_cali_data;

extern enum BAT_stat
{
    BAT_CHARGING,
    BAT_DISCHARGING,
    BAT_FULL,
    BAT_EMPTY,
    BAT_ERROR
} BAT_stat;

void ui_cali_page();
void ui_scrn_b_page();

void DisplayTask()
{
	static int i, j, frame, period;
	static double x = 0.0, y = 0.0, z = 0.0;
	static uint32_t tickNow, lastActivityTick;
	// char info[512];

	extern int32_t volatile scale_filtered_data;
	extern uint8_t UI_writing;

	uint8_t disable_long_press_flag = 0;

	// 绘制屏幕

	if (ok_to_write_gram_flag != 1)
		return;
	ok_to_write_gram_flag = 0;
	UI_writing = 1;
	OLED_Clear();

	//=============================  主页  =============================
	// 主页。短按按键归零，长按按键进入设置。
	if (display_mode == DISP_HOME)
	{

		// OLED_ShowString(0, 0, "HOME", 16, 1);

		// OLED_ShowNum(0, 0, -12345, 5, 32, 1);
		OLED_ShowWeight(8, 4, weight, 2);
		// OLED_ShowNum(0, 63-16, scale_filtered_data, 5, 16, 2);
		// OLED_ShowNum(0, 63-32, sys_cali_data.zero_value, 5, 16, 2);

		// 响应按键
		if (BTN_stat.pressEvent)
		{
			BTN_stat.pressEvent = 0;
			// 归零
			scale_get_zero_value();
		}
		if (BTN_stat.longPressEvent)
		{
			BTN_stat.longPressEvent = 0;

			display_mode = DISP_INFOBEFORESETTINGS;
			reset_menu();
			reset_settings_menu();
			// 归零，用于摇杆操作
			reset_btns();
			scale_get_zero_value();
		}
	}

	//=============================  提示  =============================
	else if (display_mode == DISP_INFOBEFORESETTINGS)
	{
		OLED_ShowChinese_String(21, 16, (const unsigned char[]){36, 37, 38, 39, 40, 41} /*上下轻推站杆*/, 6, 1);
		OLED_ShowChinese_String(21, 32, (const unsigned char[]){42, 43, 44, 45, 46, 9} /*控制光标位置*/, 6, 1);
		if (soft_timer_state_get(3) == SOFT_TIMER_STOPPED)
			soft_timer_start(SOFT_TIMER_3_UI_ENTER_SET, SOFT_TIMER_MODE_ONE_SHOT, 3000, ui_enter_settings, NULL, 0);
	}

	//=============================  设置  =============================
	// 设置。短按按键进入设置项目，短长按按键保存退出。长长按不保存。超时息屏不保存。
	else if (display_mode == DISP_SETTINGS)
	{
		// OLED_ShowString(0, 0, "SETTINGS", 16, 1);

		/*
			SET_MENU = 0,	  	// 主菜单
			SET_SETTINGS = 1, 	// 设置
			SET_HISTORY = 2,  	// 历史记录
			SET_SCRN_B = 3,		// 屏幕亮度
			SET_SCRN_SAVER = 4, // 屏保时间
			SET_SLEEP = 5,	  	// 休眠时间
			SET_SYSINFO = 6,  	// 系统信息
			SET_CALI = 7,	  	// 称重校准
			SET_FACTORY = 8,  	// 恢复出厂设置
			SET_POWEROFF = 9, 	// 关机
			SET_ABOUT = 10	  	// 关于
		*/

		// 显示设置菜单
		if (setting_page == SET_MENU)
		{
			// 绘制菜单
			OLED_DrawMenu(&mainmenu);
		}
		else if (setting_page == SET_SETTINGS)
		{
			OLED_DrawMenu(&settingsmenu);
		}
		else if (setting_page == SET_HISTORY)
		{
			// 绘制历史记录
			OLED_ShowString(0, 0, "HISTORY", 16, 1);
		}
		else if (setting_page == SET_SCRN_B)
		{
			// 绘制屏幕亮度
			//OLED_ShowString(0, 0, "SCRN B", 16, 1);
			ui_scrn_b_page();
		}
		else if (setting_page == SET_SCRN_SAVER)
		{
			// 绘制屏保时间
			OLED_ShowString(0, 0, "SCRN SAVER", 16, 1);
		}
		else if (setting_page == SET_SLEEP)
		{
			// 绘制休眠时间
			OLED_ShowString(0, 0, "SLEEP", 16, 1);
		}
		else if (setting_page == SET_SYSINFO)
		{
			// 绘制系统信息页面
			OLED_ShowString(0, 0, "SYS INFO", 16, 1);
		}
		else if (setting_page == SET_CALI)
		{
			// 绘制校准页面
			ui_cali_page();
		}
		else if (setting_page == SET_FACTORY)
		{
			// 绘制恢复出厂设置页面
			OLED_ShowString(0, 0, "FACTORY", 16, 1);
		}
		else if (setting_page == SET_POWEROFF)
		{
			// 绘制关机页面
			//OLED_ShowString(0, 0, "POWEROFF", 16, 1);
			//OLED_Refresh();
			//HAL_Delay(1000);
			goToSleep();
			BTN_stat.pressEvent = 0;
			BTN_stat.longPressEvent = 0;
			BTN_stat.isPressing = 0;
			display_mode = DISP_DEBUG;	//TODO：量产改下这里
		}
		else if (setting_page == SET_ABOUT)
		{
			// 绘制关于页面
			OLED_ShowString(0, 0, "ABOUT", 16, 1);
		}
		else
		{
			// 设置页面错误，返回主页
			setting_page = SET_MENU;
		}

		// 响应按键
		// TODO: 刚进入设置时显示一个弹窗提示扳动杆子翻页，长按保存。扳动杆子后弹窗消失
		//		弹窗图标需要根据设备方向翻转
		//		力度过大时提示
		//		动画播放完毕前不响应确认键
		if (BTN_stat.pressEvent)
		{
			BTN_stat.pressEvent = 0;
			if (setting_page == SET_MENU)
			{

				// 动画完成后才允许点击
				if (mainmenu.moveComplete)
				{
					if (mainmenu.currentPos == 0)
					{
						// TODO: 进入历史记录
						// mainmenu.movePos = 1;
					}
					else if (mainmenu.currentPos == 1)
					{
						setting_page = SET_SETTINGS;
						reset_settings_menu();
					}
				}
			}

			else if (setting_page == SET_SETTINGS)
			{
				// 动画完成后才允许点击
				if (settingsmenu.moveComplete)
				{
					// 进入高亮的设置项
					setting_page = settingsmenu.currentPos + 2;
				}
			}

		}
		if (BTN_stat.longPressEvent)
		{
			BTN_stat.longPressEvent = 0;
			if (disable_long_press_flag == 0)
			{

				if (setting_page == SET_MENU)
				{
					// TODO: 显示一个页面询问是否保存
					display_mode = DISP_HOME;
				}
				else if (setting_page == SET_SETTINGS)
				{
					setting_page = SET_MENU;
				}
				else if (setting_page == SET_SCRN_B)
				{
					setting_page = SET_SETTINGS;
				}

				else
				{
				 setting_page = SET_SETTINGS;
				}
			}

		}

		// 响应摇杆
		if (STK_DN_stat.pressEvent || STK_DN_stat.isLongPressing)
		{
			STK_DN_stat.pressEvent = 0;
			if (setting_page == SET_SETTINGS)
			{
				if (settingsmenu.moveComplete)
				{
					settingsmenu.movePos = 1;
				}
			}
			else if (setting_page == SET_MENU)
			{
				mainmenu.movePos = 1;
			}
			else if (setting_page == SET_SCRN_B && !STK_DN_stat.isLongPressing)
			{
				device_setting.scrn_brightness --;
				if (device_setting.scrn_brightness < 1)
				{
					device_setting.scrn_brightness = 3;
				}
				OLED_SetBrightness(device_setting.scrn_brightness);
				// 设置标志位，自动写入flash
				settings_update = 1;
			}
		}
		if (STK_UP_stat.pressEvent || STK_UP_stat.isLongPressing)
		{
			STK_UP_stat.pressEvent = 0;
			if (setting_page == SET_SETTINGS)
			{
				if (settingsmenu.moveComplete)
				{
					settingsmenu.movePos = -1;
				}
			}
			else if (setting_page == SET_MENU)
			{
				mainmenu.movePos = -1;
			}
			else if (setting_page == SET_SCRN_B && !STK_UP_stat.isLongPressing)
			{
				device_setting.scrn_brightness ++;
				if (device_setting.scrn_brightness > 3)
				{
					device_setting.scrn_brightness = 1;
				}
				OLED_SetBrightness(device_setting.scrn_brightness);
				// 设置标志位，自动写入flash
				settings_update = 1;
			}
		}
		// TODO:显示长按弹窗
	}

	//=============================  调试页面  =============================
	else if (display_mode == DISP_DEBUG)
	{
		frame++;
		if (frame == 60)
		{
			frame = 0;
			period++;
		}
		i++;
		j++;
		if (i > 127 + 10)
			i = -10;
		if (j > 63 + 10)
			j = -10;

		// 绘制内容
		// OLED_DrawRectangle(0, 0, 127, 15, 1, 1);
		// OLED_ShowString(0, 0, "helloworld", 16, 0);
		OLED_ShowNum(127 - 48, 0, frame, 5, 16, 1);

		OLED_ShowNum(127 - 48, 16, period, 5, 16, 1);

		// 显示电池电量
		OLED_ShowNum(0, 0, Vbat * 1000, 4, 16, 1);
		OLED_ShowNum(0, 16, BAT_stat, 2, 16, 1);
		// OLED_DrawCircle(i, 32, 10, 1,0);
		// OLED_DrawCircle(64, j, 10, 1,0);

		// 读取xyz

		// LIS2DH12_get_value(&LIS2DH12_data);

		// x = ((LIS2DH12_data.x ^ 0x800) - 2048) / 1024.0;
		// y = ((LIS2DH12_data.y ^ 0x800) - 2048) / 1024.0;
		// z = ((LIS2DH12_data.z ^ 0x800) - 2048) / 1024.0;

		// double roll = atan(x / (sqrt(y * y + z * z)));
		// double pitch = atan(z / (sqrt(x * x + y * y)));
		// double yaw = atan(y / (sqrt(x * x + z * z)));

		// 显示xyz
		// x轴
		// OLED_DrawLine(64, 32, 64 + x, 32, 1);
		// y轴
		// OLED_DrawLine(64, 32 - y, 64, 32, 1);
		// z轴
		// OLED_DrawLine(64, 32, 64 - (int)(z * 0.70710678119), 32 + (int)(z * 0.70710678119), 1);

		// OLED_ShowNum(0, 0, roll * 1000.0, 4, 16, 1);
		// OLED_ShowNum(0, 16, pitch * 1000.0, 4, 16, 1);
		// OLED_ShowNum(0, 32, yaw * 1000.0, 4, 16, 1);

		// 显示重量
		// OLED_ShowNum(0, 48, scale_filtered_data, 8, 16, 1);

		// OLED_DrawRectangle(8, 8, 119, 56, 2, 1);

		// 响应按键
		if (BTN_stat.pressEvent)
		{
			BTN_stat.pressEvent = 0;
			// display_mode = DISP_HOME;
		}
		if (BTN_stat.longPressEvent)
		{
			BTN_stat.longPressEvent = 0;
			display_mode = DISP_HOME;
		}
	}

	//=============================  状态处理  =============================

	// 根据设备方向旋转屏幕
	if (last_device_orientation != device_orientation)
	{
		OLED_DisplayTurn(device_orientation);

		// TODO: 确认方向
		mainmenu.oriantation = device_orientation;
		settingsmenu.oriantation = device_orientation;
	}
	last_device_orientation = device_orientation;

	// TODO: 到时候这个要删掉
	device_orientation = 1;

	// TODO: 睡眠控制
	if (display_mode != DISP_DEBUG) // 排除debug模式
	{
		tickNow = HAL_GetTick();
		if (tickNow > lastActivityTick + TIME_TO_SCRN_SAVER)
		{
			if (tickNow > lastActivityTick + TIME_TO_SLEEP)
			{
				// TODO: 记得取消注释
				// goToSleep();
			}
			else
			{
				// 进入屏保
				/*
				if (display_mode != DISP_SCRN_SAVER)
				{
					display_mode = DISP_SCRN_SAVER;
				}*/
			}
		}
	}

	if (BTN_stat.isPressing)
	{
		OLED_ShowString(127 - 24, 16, "BTN", 16, 1);
	}
	if (BTN_stat.isLongPressing)
	{
		OLED_ShowString(127 - 40, 16, "BTNLP", 16, 1);
	}

	//=============================  屏幕刷新  =============================

	// osSignalWait(0x01, 2000); // 等待刷新信号
	// OLED_Refresh();
	// osSignalWait(0x02, 1000); // 等待允许清屏信号
	// extern uint8_t OLED_SND_page; // 1-8页
	// OLED_SND_page = 0;
	UI_writing = 0;
}

/**
 * @brief 缓入缓出计算
 *
 * @param start 开始值
 * @param end 结束值
 * @param t 时间,0-1
 * @param n 决定曲线陡峭程度，通常取n=2或n=3。
 * @return double
 */
double easeInOut(double start, double end, double t, double n)
{
	if (t < 0.5)
	{
		return start + (end - start) * 0.5 * pow(2 * t, n);
	}
	else
	{
		return start + (end - start) * (1 - 0.5 * pow(2 * (1 - t), n));
	}
}

/**
 * @brief 绘制滚动条
 *
 * @param total 项目条数
 * @param current 当前位置（对应哪一条）
 */
/*
void OLED_DrawScrollBar(scrollbar_t *scrollbar)
{
	// 绘制背景（工字形）
	OLED_DrawLine(123, 0, 127, 0, 1);
	OLED_DrawLine(123, 63, 127, 63, 1);
	OLED_DrawLine(125, 0, 125, 63, 1);

#define EASE_DURATION 50.0

	// 绘制滑块
	// 滑块宽度=滚动条宽度
	// 计算滑块高度
	double sliderHeight = 64.0 / scrollbar->total;
	// 计算滑块目标位置
	// 如果出现新的设置位置，开始滑动
	if (scrollbar->currentPos != scrollbar->setPos)
	{
		scrollbar->sliderMoveTime = 0;
		scrollbar->sliderMoveComplete = 0;
		scrollbar->currentPos = scrollbar->setPos;
		// 计算滑块起始位置
		// 以当前位置为起点
		scrollbar->sliderMoveStartPos = scrollbar->sliderY;
		// 以目标位置为终点(需要考虑滑块高度，低端不能超出)
		scrollbar->sliderMoveTarget = (scrollbar->currentPos * sliderHeight) - sliderHeight;
	}

	// 滑块移动动画
	if (scrollbar->sliderMoveComplete == 0)
		scrollbar->sliderY = easeInOut(scrollbar->sliderMoveStartPos, scrollbar->sliderMoveTarget, scrollbar->sliderMoveTime / EASE_DURATION, 2);
	scrollbar->sliderMoveTime++;

	// 动画结束判断
	if (scrollbar->sliderMoveTime >= EASE_DURATION && scrollbar->sliderMoveComplete == 0)
	{
		scrollbar->sliderMoveComplete = 1;
		scrollbar->sliderY = scrollbar->sliderMoveTarget;
		scrollbar->sliderMoveTime = 0;
	}
	// 绘制滑块
	OLED_DrawRectangle(123, scrollbar->sliderY, 127, scrollbar->sliderY + sliderHeight, scrollbar->color, scrollbar->fill);
}*/

// 	菜单项目：

//	主页
//		历史记录		history
//		校准			scale_cali
//		加速度计校准	acc_cali
//		系统信息		sysinfo
//		关于			about

// 主菜单：查看历史记录，系统设置
// 系统设置菜单：历史记录，屏幕亮度，屏保时间，休眠时间，系统信息，称重校准，水平仪校准，恢复出厂设置，关机，关于本机

/**
 * @brief 绘制菜单
 *
 */
void OLED_DrawMenu(Menu_t *menu)
{
	// 根据参数确定绘制位置：菜单项、选中反色、滑块
	// 计算滑块高度
	double sliderHeight = 63.0 / menu->total;
	if (menu->movePos != 0)
	{
		if (menu->movePos > 0 && menu->currentPos < menu->total - 1)
		{
			// 向下移动
			menu->moveTime = 0;
			menu->moveComplete = 0;
			menu->currentPos++;
			menu->movePos = 0;

			// 计算选中项位置
			if (menu->selectedItemPos < 3)
			{
				menu->selectedItemPos++;
			}
			else
			{
				// 向下移动菜单
				menu->itemPos++;
			}
		}
		else if (menu->movePos < 0 && menu->currentPos > 0)
		{
			// 向上移动
			menu->moveTime = 0;
			menu->moveComplete = 0;
			menu->currentPos--;
			menu->movePos = 0;

			// 计算选中项位置
			if (menu->selectedItemPos > 0)
			{
				menu->selectedItemPos--;
			}
			else
			{
				// 向上移动菜单
				menu->itemPos--;
			}
		}

		// 选中项动画
		menu->selectedItemMoveStartPos = menu->selectedItemY;	   // 选中项移动起点
		menu->selectedItemMoveTarget = menu->selectedItemPos * 16; // 选中项目标位置

		// 菜单动画
		menu->itemsMoveStartPos = menu->itemsY;		// 菜单项移动起点
		menu->itemsMoveTarget = menu->itemPos * 16; // 菜单项目标位置

		// 计算滑块位置

		menu->sliderMoveStartPos = menu->sliderY; // 滑块移动起点
		// 以目标位置为终点(需要考虑滑块高度，低端不能超出)
		menu->sliderMoveTarget = menu->currentPos * sliderHeight + 0.5; // 滑块目标位置
	}

	// 动画
	if (menu->moveComplete == 0)
	{
		menu->moveComplete = 1;
		if (menu->selectedItemY != menu->selectedItemMoveTarget)
		{
			menu->selectedItemY = (int)(easeInOut(menu->selectedItemMoveStartPos, menu->selectedItemMoveTarget, menu->moveTime / 20.0, 2) + 0.5);
			menu->moveComplete = 0;
		}
		if (menu->itemsY != menu->itemsMoveTarget)
		{
			menu->itemsY = (int)(easeInOut(menu->itemsMoveStartPos, menu->itemsMoveTarget, menu->moveTime / 20.0, 2) + 0.5);
			menu->moveComplete = 0;
		}

		if (menu->sliderY != menu->sliderMoveTarget)
		{
			menu->sliderY = (int)(easeInOut(menu->sliderMoveStartPos, menu->sliderMoveTarget, menu->moveTime / 20.0, 2) + 0.5);
			menu->moveComplete = 0;
		}
		menu->moveTime++;
	}

	// 绘制菜单项
	for (int i = 0; i < menu->total; i++)
	{
		// 绘制菜单项
		OLED_ShowChinese_String(7, (16 * i) - menu->itemsY, menu->menuNames[i], menu->textCount[i], 1);
	}

	// 绘制选中反色
	OLED_DrawRectangle(6, menu->selectedItemY, 121, menu->selectedItemY + 15, 2, 1);
	// 把选中反色四个角的点涂黑，变成圆角
	OLED_DrawPoint(6, menu->selectedItemY, 0);
	OLED_DrawPoint(121, menu->selectedItemY, 0);
	OLED_DrawPoint(6, menu->selectedItemY + 15, 0);
	OLED_DrawPoint(121, menu->selectedItemY + 15, 0);

	// 根据朝向选择滑块和力度提示位置
	if (device_orientation)
	{
	}
	else
	{
	}
	uint8_t sliderX1, sliderX2, forceX1, forceX2;
	if (menu->oriantation == 0)
	{
		// 滑块在右侧，力度提示在左侧
		sliderX1 = 123;
		sliderX2 = 127;
		forceX1 = 0;
		forceX2 = 4;
	}
	else
	{
		sliderX1 = 0;
		sliderX2 = 4;
		forceX1 = 123;
		forceX2 = 127;
	}

	// 绘制滚动条
	// 绘制背景（工字形）
	// OLED_DrawLine(123, 0, 127, 0, 1);
	// OLED_DrawLine(123, 63, 127, 63, 1);
	// OLED_DrawLine(125, 0, 125, 63, 1);
	// 绘制滑块
	OLED_DrawRectangle(sliderX1, menu->sliderY, sliderX2, menu->sliderY + sliderHeight, 1, 1);
	// 滑块圆角
	OLED_DrawPoint(sliderX1, menu->sliderY, 0);
	OLED_DrawPoint(sliderX2, menu->sliderY, 0);
	OLED_DrawPoint(sliderX1, menu->sliderY + sliderHeight, 0);
	OLED_DrawPoint(sliderX2, menu->sliderY + sliderHeight, 0);

	// 绘制摇杆力度提示

	// 判断力度是大于死区（正负范围）
	double tmp;
	if (stick_value > STICK_DEAD_ZONE)
	{
		tmp = stick_value - STICK_DEAD_ZONE;
	}
	else if (stick_value < -STICK_DEAD_ZONE)
	{
		tmp = stick_value + STICK_DEAD_ZONE;
	}
	else
	{
		tmp = 0;
	}

	if(tmp > STICK_MAX_VALUE) tmp = STICK_MAX_VALUE;
	if(tmp < -STICK_MAX_VALUE) tmp = -STICK_MAX_VALUE;

	// 绘制力度提示
	int volatile forceY;
	if ((stick_value > STICK_DEAD_ZONE) || (stick_value < -STICK_DEAD_ZONE))
	{
		forceY = (int)(32 * (tmp / (STICK_MAX_VALUE - STICK_DEAD_ZONE)));
	}
	else
	{
		forceY = 0;
	}

	if (forceY > 0)
	{
		OLED_DrawLine((forceX1 + forceX2) / 2, 32 - forceY, (forceX1 + forceX2) / 2, 32, 1);
	}
	else if (forceY < 0)
	{
		OLED_DrawLine((forceX1 + forceX2) / 2, 32, (forceX1 + forceX2) / 2, 32 - forceY, 1);
	}
}
// 屏幕亮度设置页面
void ui_scrn_b_page()
{
	OLED_ShowChinese_String	(40+0,		24,(const unsigned char[]){12,13}/*亮度*/,2,2);
	OLED_ShowChar			(40+32-4, 	24, ':', 16, 2);
	OLED_DrawRectangle		(40+32+8-4, 	24, 40+32+8+8-4-1, 24+16-1, 2, 1);
	OLED_ShowNum			(40+32-4, 	24, device_setting.scrn_brightness, 1, 16, 2);
}

// 校准页面
// 1. 	输入密码
// 2. 	选择砝码重量
// 3. 	保持设备水平，按下按键开始校准
// 4.	显示：归零中，请保持设备静止...（此时归零）
// 5.	显示：请放置砝码
// 6.	自动识别砝码，显示：校准中，请保持设备静止...（此时校准）
// 7.	校准完成，显示：校准完成。请取走砝码
// 8.	验证：显示：请再次放置砝码
// 9.	自动识别砝码，测量重量，显示：校准成功/失败，按下确认键退出
void ui_cali_page()
{
	static uint8_t cali_step = 0;	   // 校准步骤
	static uint16_t cali_weight = 100; // 砝码重量（g）
	static uint32_t cali_result = 0;   // 校准结果

	// const uint32_t correct_password = CALI_PSWD; // 正确密码
	static uint32_t password = 0;
	static uint8_t password_pos = 0;
	uint32_t correct_password;

	// 临时定时器tick
	static uint32_t tmp_timer_tick = 0, step6_timer_tick = 0;
	// 正在等待flag
	static uint8_t cali_flag = 0;

	if (device_setting.sys_cali_data.is_calibrated == 1)
	{
		correct_password = CALI_PSWD;
	}
	else
	{
		correct_password = 0;
	}

	// 校准页面
	if (cali_step == 0)
	{
		if(correct_password == 0)
		{
			cali_step++;
		}
		// 输入密码
		OLED_ShowChinese_String(36, 0, (const unsigned char[]){75, 76, 77, 50} /*输入密码*/, 4, 1);
		// 按位显示密码
		for (uint8_t i = 0; i < 6; i++)
		{
			OLED_ShowChar(40 + 8 * i, 16, ((password / OLED_Pow(10, 5 - i)) % 10) + '0', 16, 1);
		}
		// 显示光标
		OLED_DrawRectangle(40 + 8 * password_pos, 16, 47 + 8 * password_pos, 31, 2, 1);
	}
	else if (cali_step == 1)
	{
		// 选择砝码重量
		OLED_ShowChinese_String(22, 0, (const unsigned char[]){47, 48, 49, 50, 22, 51} /*选择砝码重量*/, 6, 1);
		// 显示砝码重量
		OLED_ShowNum(40, 40, cali_weight, 4, 16, 1);
		// 显示单位
		OLED_ShowChar(80, 40, 'g', 16, 1);
	}
	else if (cali_step == 2)
	{
		// 保持设备水平，按下按键开始校准
		OLED_ShowChinese_String(22, 16, (const unsigned char[]){14, 52, 8, 53, 25, 26} /*保持设备水平*/, 6, 1);
		OLED_ShowChinese_String(8, 32, (const unsigned char[]){54, 37, 54, 55, 56, 57, 23, 24} /*按下按键开始校准*/, 8, 1);
	}
	else if (cali_step == 3)
	{
		// 清零中，请保持设备静止...
		OLED_ShowChinese_String(43, 16, (const unsigned char[]){58, 59, 60} /*清零中*/, 3, 1);
		OLED_ShowChinese_String(15, 32, (const unsigned char[]){61, 14, 52, 8, 53, 62, 63} /*请保持设备静止*/, 7, 1);
		if (!cali_flag)
		{
			cali_flag = 1;
			tmp_timer_tick = HAL_GetTick();
		}
		else if (HAL_GetTick() - tmp_timer_tick > 2000)
		{
			scale_get_zero_value();
			cali_flag = 0;
			cali_step++;
		}
	}
	else if (cali_step == 4)
	{
		// 请放置砝码
		OLED_ShowChinese_String(29, 24, (const unsigned char[]){61, 64, 9, 49, 50} /*请放置砝码*/, 5, 1);
	}
	else if (cali_step == 5)
	{
		// 校准中，请保持设备静止...
		OLED_ShowChinese_String(43, 16, (const unsigned char[]){23, 24, 60} /*校准中*/, 3, 1);
		OLED_ShowChinese_String(15, 32, (const unsigned char[]){61, 14, 52, 8, 53, 62, 63} /*请保持设备静止*/, 7, 1);
		if (!cali_flag)
		{
			cali_flag = 1;
			tmp_timer_tick = HAL_GetTick();
		}
		else if (HAL_GetTick() - tmp_timer_tick > 1500)
		{
			scale_calibrate(cali_weight);
			cali_flag = 0;
			cali_step++;
		}
	}
	else if (cali_step == 6)
	{
		// 校准完成。请取走砝码
		OLED_ShowChinese_String(36, 16, (const unsigned char[]){23, 24, 65, 66} /*校准完成*/, 4, 1);
		OLED_ShowChinese_String(29, 32, (const unsigned char[]){61, 67, 68, 49, 50} /*请取走砝码*/, 5, 1);
		// 显示重量
		OLED_ShowNum(40, 48, (int)(weight + 0.5), 4, 16, 1);
		// 显示单位
		OLED_ShowChar(80, 48, 'g', 16, 1);
		// 等待砝码取走：测量值接近0认为砝码取走，等待稳定后归零，自动下一步
		if (cali_flag == 0)
		{
			cali_flag = 1;
			tmp_timer_tick = HAL_GetTick();
		}
		else if (HAL_GetTick() - tmp_timer_tick > 1000)
		{
			// 判断是否取走砝码
			if ((cali_flag == 1) && (weight < 5.0 && weight > -5.0))
			{
				cali_flag = 2;
			}
			// 如果取走，开始计时
			if (cali_flag == 2)
			{
				cali_flag = 3;
				step6_timer_tick = HAL_GetTick();
			}
			// 计时结束后归零
			if (cali_flag == 3)
			{
				if (HAL_GetTick() - step6_timer_tick > 2000)
				{
					scale_get_zero_value();
					cali_flag = 0;
					cali_step++;
				}
			}

			// 超时，失败
			if (HAL_GetTick() - tmp_timer_tick > 10000)
			{
				//scale_get_zero_value();
				cali_flag = 0;
				cali_step = 8;
			}
		}
	}
	else if (cali_step == 7)
	{
		// 请再次放置砝码
		OLED_ShowChinese_String(15, 24, (const unsigned char[]){61, 69, 70, 64, 9, 49, 50} /*请再次放置砝码*/, 7, 1);
		// 显示重量
		OLED_ShowNum(40, 48, (int)(weight + 0.5), 4, 16, 1);
		// 显示单位
		OLED_ShowChar(80, 48, 'g', 16, 1);
		// 等待砝码放置：测量值接非0认为砝码放置，等待稳定后读取重量，如果重量接近砝码重量则校准成功，否则校准失败
		if (!cali_flag)
		{
			cali_flag = 1;
			tmp_timer_tick = HAL_GetTick();
		}
		else if (HAL_GetTick() - tmp_timer_tick > 1000)
		{
			if (weight < cali_weight + 5.0 && weight > cali_weight - 5.0)
			{
				cali_result = 1;
				cali_flag = 0;
				cali_step++;
			}
			if (HAL_GetTick() - tmp_timer_tick > 10000)
			{
				cali_flag = 0;
				cali_step++;
			}
		}
	}
	else if (cali_step == 8)
	{
		// TODO: 判断校准值是否处于正常范围（超范围会导致拨杆虚拟按键无法正确识别）


		// 校准成功/失败，按下按键退出
		if (cali_result) // 校准成功
		{
			OLED_ShowChinese_String(36, 24, (const unsigned char[]){23, 24, 66, 71} /*校准成功*/, 4, 1);
			// TODO: 保存设置
			device_setting.sys_cali_data.is_calibrated = 1;
		}
		else // 校准失败
		{
			OLED_ShowChinese_String(36, 24, (const unsigned char[]){23, 24, 72, 73} /*校准失败*/, 4, 1);
			device_setting.sys_cali_data.multiplier = 0.0005;
		}

		// TODO: 复位cali_step
	}

	// 响应按键
	if (BTN_stat.pressEvent)
	{
		BTN_stat.pressEvent = 0;
		// 确认，进入下一步

		if (cali_step == 0)
		{
			// 确认密码
			if (password_pos < 5)
			{
				password_pos++;
			}
			else
			{
				if (password == correct_password)
				{
					// 密码正确 下一步
					cali_step++;
				}
				else
				{
					// 密码错误
					password_pos = 0;
					cali_step = 0;
					password = 0;
					cali_weight = 100;
					setting_page = SET_SETTINGS;
				}
			}
		}

		else if (cali_step == 8)
		{
			password_pos = 0;
			cali_step = 0;
			password = 0;
			cali_weight = 100;
			setting_page = SET_SETTINGS;
		}
		else if (cali_step == 5 || cali_step == 6 || cali_step == 7 || cali_step == 3);
		else
		{
			cali_step++;
		}
	}
	if (BTN_stat.longPressEvent)
	{
		BTN_stat.longPressEvent = 0;
		// 退出校准，不保存
	}

	// 响应摇杆
	if (STK_DN_stat.pressEvent)
	{
		STK_DN_stat.pressEvent = 0;
		if (cali_step == 0)
		{
			// 该位数字如果不是0就减1
			if (((password / OLED_Pow(10, 5 - password_pos)) % 10) > 0)
			{
				password -= 1 * OLED_Pow(10, 5 - password_pos);
			}
		}
		else if (cali_step == 1)
		{
			// 选择砝码重量
			if (cali_weight > 100)
			{
				cali_weight -= 100;
			}
		}
	}
	if (STK_UP_stat.pressEvent)
	{
		STK_UP_stat.pressEvent = 0;
		if (cali_step == 0)
		{
			// 该位数字如果不是9就加1
			if (((password / OLED_Pow(10, 5 - password_pos)) % 10) < 9)
			{
				password += 1 * OLED_Pow(10, 5 - password_pos);
			}
		}
		else if (cali_step == 1)
		{
			// 选择砝码重量
			if (cali_weight < 1000)
			{
				cali_weight += 100;
			}
		}
	}
}
